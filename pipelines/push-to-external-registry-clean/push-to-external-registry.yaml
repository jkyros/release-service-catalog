---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: push-to-external-registry
  labels:
    app.kubernetes.io/version: "5.2.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton pipeline to release Snapshots to an external registry.
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: enterpriseContractExtraRuleData
      type: string
      description: |
        Extra rule data to be merged into the policy specified in params.enterpriseContractPolicy. Use syntax
        "key1=value1,key2=value2..."
      default: "pipeline_intention=release"
    - name: enterpriseContractTimeout
      type: string
      description: Timeout setting for `ec validate`
      default: 40m0s
    - name: postCleanUp
      type: string
      description: Cleans up workspace after finishing executing the pipeline
      default: "true"
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/konflux-ci/release-service-catalog.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
  workspaces:
    - name: release-workspace
  tasks:
    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/verify-access-to-resources/verify-access-to-resources.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: snapshot
          value: $(params.snapshot)
        - name: requireInternalServices
          value: "false"
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-access-to-resources
    - name: reduce-snapshot
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/reduce-snapshot/reduce-snapshot.yaml
      params:
        - name: SNAPSHOT
          value: $(workspaces.data.path)/$(tasks.collect-data.results.snapshotSpec)
        - name: SINGLE_COMPONENT
          value: $(tasks.collect-data.results.singleComponentMode)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE
          value: snapshot/$(tasks.collect-data.results.snapshotName)
        - name: SINGLE_COMPONENT_CUSTOM_RESOURCE_NS
          value: $(tasks.collect-data.results.snapshotNamespace)
        - name: SNAPSHOT_PATH
          value: $(workspaces.data.path)/$(tasks.collect-data.results.snapshotSpec)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: apply-mapping
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/apply-mapping/apply-mapping.yaml
      params:
        - name: failOnEmptyResult
          value: "true"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      workspaces:
        - name: config
          workspace: release-workspace
      runAfter:
        - reduce-snapshot
    - name: push-snapshot
      retries: 5
      when:
        - input: "$(tasks.apply-mapping.results.mapped)"
          operator: in
          values: ["true"]
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/push-snapshot/push-snapshot.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: resultsDirPath
          value: "$(tasks.collect-data.results.resultsDir)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - apply-mapping
    - name: collect-registry-token-secret
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/collect-registry-token-secret/collect-registry-token-secret.yaml
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: make-repo-public
      retries: 5
      when:
        - input: "$(tasks.collect-registry-token-secret.results.registrySecret)"
          operator: notin
          values: [""]
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/make-repo-public/make-repo-public.yaml
      params:
        - name: dataPath
          value: "$(tasks.collect-data.results.data)"
        - name: registrySecret
          value: $(tasks.collect-registry-token-secret.results.registrySecret)
      runAfter:
        - collect-registry-token-secret
        - push-snapshot
    - name: update-cr-status
      params:
        - name: resource
          value: $(params.release)
        - name: resultsDirPath
          value: $(tasks.collect-data.results.resultsDir)
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/update-cr-status/update-cr-status.yaml
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - push-snapshot
  finally:
    - name: cleanup
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: tasks/cleanup-workspace/cleanup-workspace.yaml
      when:
        - input: $(params.postCleanUp)
          operator: in
          values: ["true"]
      params:
        - name: subdirectory
          value: "$(context.pipelineRun.uid)"
        - name: pipelineRunUid
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: input
          workspace: release-workspace
